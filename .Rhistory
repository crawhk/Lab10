library(tidyverse)
library(tidymodels)
library(openintro)
library(tidyverse)
library(tidymodels)
library(openintro)
ggplot(evals, aes(x = score)) +
geom_histogram()
?evals
evals %>%
summary(score)
evals
evals_score <- evals %>%
score = c(score)
summary(evals$score)
ggplot(evals, aes(x = score)) +
geom_boxplot()
ggplot(evals, aes(x = score, y = bty_avg)) +
geom_point()
ggplot(evals, aes(x = score, y = bty_avg)) +
geom_jitter()
linear_reg() %>%
set_engine("lm") %>%
fit(m_bty ~ bty_avg, data = evals)
m_bty <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ bty_avg, data = evals)
m_bty
ggplot(evals, aes(x = score, y = bty_avg)) +
geom_jitter() +
m_bty
ggplot(evals, aes(x = score, y = m_bty)) +
geom_jitter()
ggplot(evals, aes(x = score, y = bty_avg)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title = "Hot or Not", subtitle = "Teaching Eval v.s. Beauty")
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title = "Hot or Not?", subtitle = "Teaching Eval v.s. Beauty", x = "Beauty Avg", y = "Eval Score" )
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", color = "orange") +
labs(title = "Hot or Not?", subtitle = "Teaching Eval v.s. Beauty", x = "Beauty Avg", y = "Eval Score" )
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", color = "orange", se = FALSE) +
labs(title = "Hot or Not?", subtitle = "Teaching Eval v.s. Beauty", x = "Beauty Avg", y = "Eval Score" )
summary(m_bty$fit)
summary(m_bty$fit)$r.squared
m_gen <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ gender, data = evals)
summary(m_gen$fit)
ggplot(evals, aes(x = gender, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", color = "orange", se = FALSE)
summary(m_gen$fit)
m_rank <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ rank, data = evals)
summary(m_rank$fit)
evals_relvl %>%
relevel(rank)
evals_relvl <- rank %>%
relevel(rank)
evals_relvl <- relevel(evals$rank, ref = "tenure track")
m_rank_relevel <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ evals_relvl, data = evals)
summary(m_rank$fit)
summary(m_rank_relevel$fit)
tenure_eligible <- relevel(evals$evals_relvl, ref = "tenure track")
elig <- evals %>%
mutate(tenure_elig = ifelse(rank %in% c("tenure track", "tenured"), "yes", "no"))
m_tenure_elig <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ tenure_elig, data = elig)
summary(m_tenure_elig$fit)
summary(m_tenure_elig$fit)
